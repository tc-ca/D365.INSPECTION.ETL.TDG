// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TDG.CORE.ETL.MODELS.LEGSANDREGS;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace TDG.CORE.ETL.MODELS.LEGSANDREGS
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LegsAndRegsActResult
    {
        [JsonProperty("uniqueId")]
        public string UniqueId { get; set; }

        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("fullDetails")]
        public FullDetails FullDetails { get; set; }
    }

    public partial class FullDetails
    {
        [JsonProperty("Statute")]
        public Statute Statute { get; set; }
    }

    public partial class Statute
    {
        [JsonProperty("lims:pit-date")]
        public DateTimeOffset LimsPitDate { get; set; }

        [JsonProperty("hasPreviousVersion")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool HasPreviousVersion { get; set; }

        [JsonProperty("lims:lastAmendedDate")]
        public DateTimeOffset LimsLastAmendedDate { get; set; }

        [JsonProperty("lims:current-date")]
        public DateTimeOffset LimsCurrentDate { get; set; }

        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("bill-origin")]
        public string BillOrigin { get; set; }

        [JsonProperty("bill-type")]
        public string BillType { get; set; }

        [JsonProperty("in-force")]
        public string InForce { get; set; }

        [JsonProperty("xml:lang")]
        public string XmlLang { get; set; }

        [JsonProperty("xmlns:lims")]
        public Uri XmlnsLims { get; set; }

        [JsonProperty("Identification")]
        public Identification Identification { get; set; }

        [JsonProperty("Introduction")]
        public Introduction Introduction { get; set; }

        [JsonProperty("Body")]
        public Body Body { get; set; }

        [JsonProperty("Schedule")]
        public List<Schedule> Schedule { get; set; }
    }

    public partial class Body
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Heading")]
        public List<HeadingElement> Heading { get; set; }

        [JsonProperty("Section")]
        public List<SectionElement> Section { get; set; }
    }

    public partial class HeadingElement
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("level")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Level { get; set; }

        [JsonProperty("TitleText")]
        public string TitleText { get; set; }
    }

    public partial class SectionElement
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:lastAmendedDate")]
        public DateTimeOffset LimsLastAmendedDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("MarginalNote", NullValueHandling = NullValueHandling.Ignore)]
        public MarginalNote MarginalNote { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text", NullValueHandling = NullValueHandling.Ignore)]
        public SubsectionText? Text { get; set; }

        [JsonProperty("Definition", NullValueHandling = NullValueHandling.Ignore)]
        public List<Definition> Definition { get; set; }

        [JsonProperty("HistoricalNote", NullValueHandling = NullValueHandling.Ignore)]
        public SectionHistoricalNote HistoricalNote { get; set; }

        [JsonProperty("Subsection", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleSubsection> Subsection { get; set; }

        [JsonProperty("Paragraph", NullValueHandling = NullValueHandling.Ignore)]
        public List<SectionParagraph> Paragraph { get; set; }
    }

    public partial class Definition
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Text")]
        public DefinitionText Text { get; set; }

        [JsonProperty("Paragraph", NullValueHandling = NullValueHandling.Ignore)]
        public List<DefinitionParagraph> Paragraph { get; set; }
    }

    public partial class DefinitionParagraph
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public IndigoText Text { get; set; }
    }

    public partial class PurpleText
    {
        [JsonProperty("text")]
        public List<string> Text { get; set; }

        [JsonProperty("XRefExternal", NullValueHandling = NullValueHandling.Ignore)]
        public XRefExternalElement XRefExternal { get; set; }

        [JsonProperty("DefinedTermFr")]
        public string DefinedTermFr { get; set; }
    }

    public partial class XRefExternalElement
    {
        [JsonProperty("reference-type")]
        public ReferenceType ReferenceType { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public string Link { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class DefinitionText
    {
        [JsonProperty("DefinedTermEn")]
        public string DefinedTermEn { get; set; }

        [JsonProperty("Repealed", NullValueHandling = NullValueHandling.Ignore)]
        public string Repealed { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public Text? Text { get; set; }

        [JsonProperty("DefinedTermFr", NullValueHandling = NullValueHandling.Ignore)]
        public string DefinedTermFr { get; set; }

        [JsonProperty("XRefExternal", NullValueHandling = NullValueHandling.Ignore)]
        public XRefExternalElement XRefExternal { get; set; }

        [JsonProperty("DefinitionEnOnly", NullValueHandling = NullValueHandling.Ignore)]
        public string DefinitionEnOnly { get; set; }
    }

    public partial class SectionHistoricalNote
    {
        [JsonProperty("HistoricalNoteSubItem")]
        public HistoricalNoteSubItem HistoricalNoteSubItem { get; set; }
    }

    public partial class Introduction
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string IntroductionText { get; set; }

        [JsonProperty("lims:enacted-date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LimsEnactedDate { get; set; }

        [JsonProperty("Text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("XRefExternal", NullValueHandling = NullValueHandling.Ignore)]
        public XRefExternalElement XRefExternal { get; set; }

        [JsonProperty("Label", NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        [JsonProperty("Stages", NullValueHandling = NullValueHandling.Ignore)]
        public List<Stage> Stages { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("Enacts", NullValueHandling = NullValueHandling.Ignore)]
        public Introduction Enacts { get; set; }

        [JsonProperty("Provision", NullValueHandling = NullValueHandling.Ignore)]
        public IntroductionProvision Provision { get; set; }
    }

    public partial class IntroductionProvision
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("format-ref")]
        public string FormatRef { get; set; }

        [JsonProperty("language-align")]
        public string LanguageAlign { get; set; }

        [JsonProperty("list-item")]
        public string ListItem { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }
    }

    public partial class Stage
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsFid { get; set; }

        [JsonProperty("lims:id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsId { get; set; }

        [JsonProperty("stage")]
        public string StageStage { get; set; }

        [JsonProperty("Date")]
        public Date Date { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("YYYY")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Yyyy { get; set; }

        [JsonProperty("MM")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Mm { get; set; }

        [JsonProperty("DD")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Dd { get; set; }
    }

    public partial class MarginalNote
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("XRefExternal", NullValueHandling = NullValueHandling.Ignore)]
        public XRefExternalElement XRefExternal { get; set; }

        [JsonProperty("Language", NullValueHandling = NullValueHandling.Ignore)]
        public Language Language { get; set; }
    }

    public partial class Language
    {
        [JsonProperty("xml:lang")]
        public string XmlLang { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class SectionParagraph
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }
    }

    public partial class PurpleSubsection
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public SubsectionText Text { get; set; }

        [JsonProperty("MarginalNote", NullValueHandling = NullValueHandling.Ignore)]
        public Introduction MarginalNote { get; set; }

        [JsonProperty("Paragraph", NullValueHandling = NullValueHandling.Ignore)]
        public List<SubsectionParagraph> Paragraph { get; set; }

        [JsonProperty("ContinuedSectionSubsection", NullValueHandling = NullValueHandling.Ignore)]
        public Introduction ContinuedSectionSubsection { get; set; }
    }

    public partial class SubsectionParagraph
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public IndecentText Text { get; set; }

        [JsonProperty("lims:enacted-date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LimsEnactedDate { get; set; }

        [JsonProperty("Subparagraph", NullValueHandling = NullValueHandling.Ignore)]
        public List<Introduction> Subparagraph { get; set; }
    }

    public partial class FluffyText
    {
        [JsonProperty("text")]
        public List<string> Text { get; set; }

        [JsonProperty("XRefExternal")]
        public XRefExternalUnion XRefExternal { get; set; }
    }

    public partial class TentacledText
    {
        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Text { get; set; }

        [JsonProperty("XRefExternal", NullValueHandling = NullValueHandling.Ignore)]
        public XRefExternalElement XRefExternal { get; set; }

        [JsonProperty("Language", NullValueHandling = NullValueHandling.Ignore)]
        public Language Language { get; set; }

        [JsonProperty("Repealed", NullValueHandling = NullValueHandling.Ignore)]
        public string Repealed { get; set; }
    }

    public partial class Identification
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("LongTitle")]
        public Introduction LongTitle { get; set; }

        [JsonProperty("ShortTitle")]
        public Introduction ShortTitle { get; set; }

        [JsonProperty("RunningHead")]
        public Introduction RunningHead { get; set; }

        [JsonProperty("BillHistory")]
        public Introduction BillHistory { get; set; }

        [JsonProperty("Chapter")]
        public Chapter Chapter { get; set; }
    }

    public partial class Chapter
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("ConsolidatedNumber")]
        public ConsolidatedNumber ConsolidatedNumber { get; set; }

        [JsonProperty("AnnualStatuteId")]
        public AnnualStatuteId AnnualStatuteId { get; set; }
    }

    public partial class AnnualStatuteId
    {
        [JsonProperty("revised-statute")]
        public string RevisedStatute { get; set; }

        [JsonProperty("AnnualStatuteNumber")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long AnnualStatuteNumber { get; set; }

        [JsonProperty("YYYY")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Yyyy { get; set; }
    }

    public partial class ConsolidatedNumber
    {
        [JsonProperty("official")]
        public string Official { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Schedule
    {
        [JsonProperty("lims:inforce-start-date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LimsInforceStartDate { get; set; }

        [JsonProperty("lims:lastAmendedDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LimsLastAmendedDate { get; set; }

        [JsonProperty("lims:fid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsFid { get; set; }

        [JsonProperty("lims:id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsId { get; set; }

        [JsonProperty("bilingual", NullValueHandling = NullValueHandling.Ignore)]
        public string Bilingual { get; set; }

        [JsonProperty("spanlanguages", NullValueHandling = NullValueHandling.Ignore)]
        public string Spanlanguages { get; set; }

        [JsonProperty("ScheduleFormHeading")]
        public ScheduleFormHeading ScheduleFormHeading { get; set; }

        [JsonProperty("Provision", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProvisionElement> Provision { get; set; }

        [JsonProperty("HistoricalNote", NullValueHandling = NullValueHandling.Ignore)]
        public ScheduleHistoricalNote HistoricalNote { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("BillPiece", NullValueHandling = NullValueHandling.Ignore)]
        public BillPiece BillPiece { get; set; }
    }

    public partial class BillPiece
    {
        [JsonProperty("RelatedOrNotInForce")]
        public RelatedOrNotInForce RelatedOrNotInForce { get; set; }
    }

    public partial class RelatedOrNotInForce
    {
        [JsonProperty("Heading")]
        public RelatedOrNotInForceHeading Heading { get; set; }

        [JsonProperty("Section")]
        public RelatedOrNotInForceSection Section { get; set; }
    }

    public partial class RelatedOrNotInForceHeading
    {
        [JsonProperty("level")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Level { get; set; }

        [JsonProperty("style")]
        public string Style { get; set; }

        [JsonProperty("TitleText")]
        public string TitleText { get; set; }
    }

    public partial class RelatedOrNotInForceSection
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("Label")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Label { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }

        [JsonProperty("AmendedText")]
        public AmendedText AmendedText { get; set; }
    }

    public partial class AmendedText
    {
        [JsonProperty("include-in-TableOfProvisions")]
        public string IncludeInTableOfProvisions { get; set; }

        [JsonProperty("Heading")]
        public AmendedTextHeading Heading { get; set; }

        [JsonProperty("Section")]
        public AmendedTextSection Section { get; set; }
    }

    public partial class AmendedTextHeading
    {
        [JsonProperty("level")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Level { get; set; }

        [JsonProperty("TitleText")]
        public string TitleText { get; set; }
    }

    public partial class AmendedTextSection
    {
        [JsonProperty("MarginalNote")]
        public string MarginalNote { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Subsection")]
        public List<FluffySubsection> Subsection { get; set; }
    }

    public partial class FluffySubsection
    {
        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }

        [JsonProperty("MarginalNote", NullValueHandling = NullValueHandling.Ignore)]
        public string MarginalNote { get; set; }
    }

    public partial class ScheduleHistoricalNote
    {
        [JsonProperty("HistoricalNoteSubItem")]
        public Introduction HistoricalNoteSubItem { get; set; }
    }

    public partial class ProvisionElement
    {
        [JsonProperty("lims:inforce-start-date")]
        public DateTimeOffset LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsFid { get; set; }

        [JsonProperty("lims:id")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long LimsId { get; set; }

        [JsonProperty("first-line-indent")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long FirstLineIndent { get; set; }

        [JsonProperty("language-align")]
        public string LanguageAlign { get; set; }

        [JsonProperty("list-item")]
        public string ListItem { get; set; }

        [JsonProperty("subsequent-line-indent")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long SubsequentLineIndent { get; set; }

        [JsonProperty("Label")]
        public string Label { get; set; }

        [JsonProperty("Text")]
        public ProvisionText Text { get; set; }
    }

    public partial class StickyText
    {
        [JsonProperty("text")]
        public Text Text { get; set; }

        [JsonProperty("XRefExternal")]
        public XRefExternalElement XRefExternal { get; set; }
    }

    public partial class ScheduleFormHeading
    {
        [JsonProperty("lims:inforce-start-date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LimsInforceStartDate { get; set; }

        [JsonProperty("lims:fid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsFid { get; set; }

        [JsonProperty("lims:id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? LimsId { get; set; }

        [JsonProperty("Label", NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        [JsonProperty("OriginatingRef", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginatingRef { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("TitleText", NullValueHandling = NullValueHandling.Ignore)]
        public string TitleText { get; set; }
    }

    public enum ReferenceType { Act, Other };

    public partial struct IndigoText
    {
        public PurpleText PurpleText;
        public string String;

        public static implicit operator IndigoText(PurpleText PurpleText) => new IndigoText { PurpleText = PurpleText };
        public static implicit operator IndigoText(string String) => new IndigoText { String = String };
    }

    public partial struct Text
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator Text(string String) => new Text { String = String };
        public static implicit operator Text(List<string> StringArray) => new Text { StringArray = StringArray };
    }

    public partial struct HistoricalNoteSubItem
    {
        public Introduction Introduction;
        public List<Introduction> IntroductionArray;

        public static implicit operator HistoricalNoteSubItem(Introduction Introduction) => new HistoricalNoteSubItem { Introduction = Introduction };
        public static implicit operator HistoricalNoteSubItem(List<Introduction> IntroductionArray) => new HistoricalNoteSubItem { IntroductionArray = IntroductionArray };
    }

    public partial struct XRefExternalUnion
    {
        public XRefExternalElement XRefExternalElement;
        public List<XRefExternalElement> XRefExternalElementArray;

        public static implicit operator XRefExternalUnion(XRefExternalElement XRefExternalElement) => new XRefExternalUnion { XRefExternalElement = XRefExternalElement };
        public static implicit operator XRefExternalUnion(List<XRefExternalElement> XRefExternalElementArray) => new XRefExternalUnion { XRefExternalElementArray = XRefExternalElementArray };
    }

    public partial struct IndecentText
    {
        public FluffyText FluffyText;
        public string String;

        public static implicit operator IndecentText(FluffyText FluffyText) => new IndecentText { FluffyText = FluffyText };
        public static implicit operator IndecentText(string String) => new IndecentText { String = String };
    }

    public partial struct SubsectionText
    {
        public string String;
        public TentacledText TentacledText;

        public static implicit operator SubsectionText(string String) => new SubsectionText { String = String };
        public static implicit operator SubsectionText(TentacledText TentacledText) => new SubsectionText { TentacledText = TentacledText };
    }

    public partial struct ProvisionText
    {
        public StickyText StickyText;
        public string String;

        public static implicit operator ProvisionText(StickyText StickyText) => new ProvisionText { StickyText = StickyText };
        public static implicit operator ProvisionText(string String) => new ProvisionText { String = String };
    }

    public partial class LegsAndRegsActResult
    {
        public static LegsAndRegsActResult FromJson(string json) => JsonConvert.DeserializeObject<LegsAndRegsActResult>(json, TDG.CORE.ETL.MODELS.LEGSANDREGS.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LegsAndRegsActResult self) => JsonConvert.SerializeObject(self, TDG.CORE.ETL.MODELS.LEGSANDREGS.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IndigoTextConverter.Singleton,
                ReferenceTypeConverter.Singleton,
                TextConverter.Singleton,
                HistoricalNoteSubItemConverter.Singleton,
                IndecentTextConverter.Singleton,
                XRefExternalUnionConverter.Singleton,
                SubsectionTextConverter.Singleton,
                ProvisionTextConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class IndigoTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IndigoText) || t == typeof(IndigoText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new IndigoText { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleText>(reader);
                    return new IndigoText { PurpleText = objectValue };
            }
            throw new Exception("Cannot unmarshal type IndigoText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IndigoText)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.PurpleText != null)
            {
                serializer.Serialize(writer, value.PurpleText);
                return;
            }
            throw new Exception("Cannot marshal type IndigoText");
        }

        public static readonly IndigoTextConverter Singleton = new IndigoTextConverter();
    }

    internal class ReferenceTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ReferenceType) || t == typeof(ReferenceType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "act":
                    return ReferenceType.Act;
                case "other":
                    return ReferenceType.Other;
            }
            throw new Exception("Cannot unmarshal type ReferenceType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ReferenceType)untypedValue;
            switch (value)
            {
                case ReferenceType.Act:
                    serializer.Serialize(writer, "act");
                    return;
                case ReferenceType.Other:
                    serializer.Serialize(writer, "other");
                    return;
            }
            throw new Exception("Cannot marshal type ReferenceType");
        }

        public static readonly ReferenceTypeConverter Singleton = new ReferenceTypeConverter();
    }

    internal class TextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Text) || t == typeof(Text?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Text { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new Text { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Text");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Text)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type Text");
        }

        public static readonly TextConverter Singleton = new TextConverter();
    }

    internal class HistoricalNoteSubItemConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HistoricalNoteSubItem) || t == typeof(HistoricalNoteSubItem?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Introduction>(reader);
                    return new HistoricalNoteSubItem { Introduction = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<Introduction>>(reader);
                    return new HistoricalNoteSubItem { IntroductionArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type HistoricalNoteSubItem");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (HistoricalNoteSubItem)untypedValue;
            if (value.IntroductionArray != null)
            {
                serializer.Serialize(writer, value.IntroductionArray);
                return;
            }
            if (value.Introduction != null)
            {
                serializer.Serialize(writer, value.Introduction);
                return;
            }
            throw new Exception("Cannot marshal type HistoricalNoteSubItem");
        }

        public static readonly HistoricalNoteSubItemConverter Singleton = new HistoricalNoteSubItemConverter();
    }

    internal class IndecentTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IndecentText) || t == typeof(IndecentText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new IndecentText { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FluffyText>(reader);
                    return new IndecentText { FluffyText = objectValue };
            }
            throw new Exception("Cannot unmarshal type IndecentText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IndecentText)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FluffyText != null)
            {
                serializer.Serialize(writer, value.FluffyText);
                return;
            }
            throw new Exception("Cannot marshal type IndecentText");
        }

        public static readonly IndecentTextConverter Singleton = new IndecentTextConverter();
    }

    internal class XRefExternalUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(XRefExternalUnion) || t == typeof(XRefExternalUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<XRefExternalElement>(reader);
                    return new XRefExternalUnion { XRefExternalElement = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<XRefExternalElement>>(reader);
                    return new XRefExternalUnion { XRefExternalElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type XRefExternalUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (XRefExternalUnion)untypedValue;
            if (value.XRefExternalElementArray != null)
            {
                serializer.Serialize(writer, value.XRefExternalElementArray);
                return;
            }
            if (value.XRefExternalElement != null)
            {
                serializer.Serialize(writer, value.XRefExternalElement);
                return;
            }
            throw new Exception("Cannot marshal type XRefExternalUnion");
        }

        public static readonly XRefExternalUnionConverter Singleton = new XRefExternalUnionConverter();
    }

    internal class SubsectionTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubsectionText) || t == typeof(SubsectionText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SubsectionText { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<TentacledText>(reader);
                    return new SubsectionText { TentacledText = objectValue };
            }
            throw new Exception("Cannot unmarshal type SubsectionText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SubsectionText)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.TentacledText != null)
            {
                serializer.Serialize(writer, value.TentacledText);
                return;
            }
            throw new Exception("Cannot marshal type SubsectionText");
        }

        public static readonly SubsectionTextConverter Singleton = new SubsectionTextConverter();
    }

    internal class ProvisionTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProvisionText) || t == typeof(ProvisionText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ProvisionText { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<StickyText>(reader);
                    return new ProvisionText { StickyText = objectValue };
            }
            throw new Exception("Cannot unmarshal type ProvisionText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProvisionText)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StickyText != null)
            {
                serializer.Serialize(writer, value.StickyText);
                return;
            }
            throw new Exception("Cannot marshal type ProvisionText");
        }

        public static readonly ProvisionTextConverter Singleton = new ProvisionTextConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
