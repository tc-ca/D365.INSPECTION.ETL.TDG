//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TC.Legislation.EarlyBound {
    using System.Reflection;
    using System.Linq;
    using System;
    using System.Collections.Generic;
    using System.Dynamic;
    using System.Diagnostics.CodeAnalysis;
    
    
    [ExcludeFromCodeCoverageAttribute()]
    public class Entity {
        
        public Dictionary<string, object> Attributes = new Dictionary<string, object>();
        
        public Dictionary<string, string> FormattedValues = new Dictionary<string, string>();
        
        public Entity() {
        }
        
        public Entity(System.Dynamic.ExpandoObject expandoObject) {
            var formattedAttributePostFix = "@OData.Community.Display.V1.FormattedValue";
            var attributes = expandoObject.ToArray();
            for (var i = 0; i < attributes.Length; i++
            ) {
                var keyValuePair = attributes[i];
                var value = keyValuePair.Value;
                var valueFieldName = keyValuePair.Key;
                Type convertValueToType = null;
                if (value != null) {
                    if (value is string stringValue && Guid.TryParse(stringValue, out var id)) {
                        value = id;
                        var propertyWithEntityRefAttribute = GetPublicInstanceProperties().FirstOrDefault(x => x.GetCustomAttribute<EntityReferenceAttribute>()?.ValueField?.Equals(valueFieldName, StringComparison.CurrentCultureIgnoreCase) == true);
                        if (propertyWithEntityRefAttribute != null) {
                            var entityReferenceAttribute = propertyWithEntityRefAttribute.GetCustomAttribute<EntityReferenceAttribute>();
                            propertyWithEntityRefAttribute.SetValue(this, new EntityReference(entityReferenceAttribute.EntitySetName, id));
                        }
                    }
                    else {
                        if (value is ExpandoObject valueExpandoObject) {
                            var propertyWithEntityAttribute = GetPublicInstanceProperties().FirstOrDefault(x => x.GetCustomAttribute<EntityAttribute>()?.AttributeName?.Equals(valueFieldName, StringComparison.CurrentCultureIgnoreCase) == true);
                            if (propertyWithEntityAttribute != null) {
                                value = Activator.CreateInstance(propertyWithEntityAttribute.PropertyType, valueExpandoObject);
                            }
                        }
                        else {
                            var propertyForField = GetPublicInstanceProperties().FirstOrDefault(x => x.Name.Equals(valueFieldName, StringComparison.CurrentCultureIgnoreCase) == true);
                            if (propertyForField != null) {
                                convertValueToType = propertyForField.PropertyType;
                            }
                        }
                    }
                    if (convertValueToType != null) {
                        if (convertValueToType.IsGenericType && convertValueToType.GetGenericTypeDefinition() == typeof(Nullable<>)) {
                            convertValueToType = Nullable.GetUnderlyingType(convertValueToType);
                        }
                        value = Convert.ChangeType(value, convertValueToType);
                    }
                    if (valueFieldName.EndsWith(formattedAttributePostFix)) {
                        FormattedValues.Add(valueFieldName.Replace(formattedAttributePostFix, string.Empty), value?.ToString());
                    }
                    else {
                        Attributes.Add(valueFieldName, value);
                    }
                }
            }
        }
        
        public Guid Id {
            get {
                return this.GetAttributeValue<System.Guid>(this.GetIdAttribute());
            }
            set {
                this.SetAttributeValue(this.GetIdAttribute(), value);
            }
        }
        
        public string EntitySetName {
            get {
                return GetType().GetField(nameof(EntitySetName), BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)?.GetValue(null)?.ToString();
            }
        }
        
        public string EntityLogicalName {
            get {
                return GetType().GetField(nameof(EntityLogicalName), BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)?.GetValue(null)?.ToString();
            }
        }
        
        public T GetAttributeValue<T>(string attributeName)
         {
            var keyValuePair = Attributes.FirstOrDefault(x => x.Key.Equals(attributeName, StringComparison.InvariantCultureIgnoreCase));
            return keyValuePair.Value != null ? (T)keyValuePair.Value : default(T);
        }
        
        public void SetAttributeValue(string attributeName, object value) {
            if (Attributes.ContainsKey(attributeName)) {
                Attributes[attributeName] = value;
            }
            else {
                Attributes.Add(attributeName, value);
            }
        }
        
        public ExpandoObject ToExpandoObject() {
            dynamic expando = new ExpandoObject();
            var expandoObject = ((IDictionary<string, object>)(expando));
            var attributes = Attributes.ToArray();
            for (var i = 0; i < attributes.Length; i++
            ) {
                var keyValuePair = attributes[i];
                var value = keyValuePair.Value;
                var key = keyValuePair.Key;
                if (value is EntityReference entityReference) {
                    key = key.ToLower();
                    value = $"/{entityReference.EntitySetName}({entityReference.EntityId})";
                }
                else {
                    key = key.ToLower();
                    if (value is DateTime dateTimeValue) {
                        var propertyForAttribute = GetPublicInstanceProperties().FirstOrDefault(x => x.Name.Equals(key, StringComparison.InvariantCultureIgnoreCase));
                        if (propertyForAttribute != null) {
                            var onlyDateAttr = propertyForAttribute.GetCustomAttribute<OnlyDateAttribute>();
                            if (onlyDateAttr != null) {
                                value = dateTimeValue.ToString(OnlyDateAttribute.Format);
                            }
                        }
                    }
                }
                expandoObject.Add(key, value);
            }
            return ((ExpandoObject)(expandoObject));
        }
        
        public EntityReference ToEntityReference() {
            return new EntityReference(this.EntitySetName, this.Id);
        }
        
        private PropertyInfo[] GetPublicInstanceProperties() {
            return GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
        
        private string GetIdAttribute() {
            return GetType().GetField("PrimaryIdAttribute", BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)?.GetValue(null)?.ToString();
        }
    }
    
    [ExcludeFromCodeCoverageAttribute()]
    public class EntityReference {
        
        private string _entitySetName;
        
        private System.Guid _entityId;
        
        public EntityReference(string entitySetName, System.Guid entityId) {
            EntitySetName = entitySetName;
            EntityId = entityId;
        }
        
        public string EntitySetName {
            get {
                return _entitySetName;
            }
            set {
                _entitySetName = value;
            }
        }
        
        public System.Guid EntityId {
            get {
                return _entityId;
            }
            set {
                _entityId = value;
            }
        }
    }
    
    [ExcludeFromCodeCoverageAttribute()]
    public class EntityReferenceAttribute : System.Attribute {
        
        private string _entitySetName;
        
        private string _valueField;
        
        public EntityReferenceAttribute(string entitySetName, string valueField) {
            EntitySetName = entitySetName;
            ValueField = valueField;
        }
        
        public string EntitySetName {
            get {
                return _entitySetName;
            }
            set {
                _entitySetName = value;
            }
        }
        
        public string ValueField {
            get {
                return _valueField;
            }
            set {
                _valueField = value;
            }
        }
    }
    
    [ExcludeFromCodeCoverageAttribute()]
    public class EntityAttribute : System.Attribute {
        
        private string _entityLogicalName;
        
        private string _attributeName;
        
        public EntityAttribute(string entityLogicalName, string attributeName) {
            EntityLogicalName = entityLogicalName;
            AttributeName = attributeName;
        }
        
        public string EntityLogicalName {
            get {
                return _entityLogicalName;
            }
            set {
                _entityLogicalName = value;
            }
        }
        
        public string AttributeName {
            get {
                return _attributeName;
            }
            set {
                _attributeName = value;
            }
        }
    }
    
    [ExcludeFromCodeCoverageAttribute()]
    public class OnlyDateAttribute : System.Attribute {
        
        public const string Format = "yyyy-MM-dd";
    }
}
